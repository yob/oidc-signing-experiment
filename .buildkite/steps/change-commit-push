#!/bin/sh 

set -e

echo "+++ fetching OIDC token from Buildkite"

# gitsign supports caching credentials, but we don't want to do that. Unset the ENV var if its found
unset GITSIGN_CREDENTIAL_CACHE

# Now fetch an OIDC token from Buildkite. Audience must be "sigstore", as required by fulcio
# SIGSTORE_ID_TOKEN is a special ENV that gitsign looks for. It will use the OIDC token it finds
# there to request a short term x.509 certificate from sigstore/fulcio, and git will sign the
# commit with it
SIGSTORE_ID_TOKEN="$(buildkite-agent oidc request-token --audience sigstore)"

echo "+++ creating signed git commit"

# setup the working directory git checkout to sign commits

git config --local commit.gpgsign true  # Sign all commits
git config --local tag.gpgsign true  # Sign all tags
git config --local gpg.x509.program gitsign  # Use gitsign for signing
git config --local gpg.format x509  # gitsign expects x509 args

# Create a new commit on a branch and push up to GitHub
BRANCH_NAME="branch-`date +%s`"
git checkout -b ${BRANCH_NAME}
echo `date --iso-8601=seconds` > the-date.txt
git add the-date.txt
git commit the-date.txt -m "update"

echo "+++ examine the signature"

git cat-file commit HEAD | sed -n '/BEGIN/, /END/p' | sed 's/^ //g' | sed 's/gpgsig //g' | sed 's/SIGNED MESSAGE/PKCS7/g' | openssl pkcs7 -print -print_certs -text

echo "+++ pushing branch to github"

git push origin -u ${BRANCH_NAME}
